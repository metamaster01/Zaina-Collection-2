
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// --- USER MODELS ---

model User {
  id                         String    @id @default(auto()) @map("_id") @db.ObjectId
  name                       String
  email                      String    @unique
  password                   String
  role                       String    @default("USER") // USER or ADMIN
  phone                      String?
  dateOfBirth                DateTime?
  profilePictureUrl          String?
  joinDate                   DateTime  @default(now())
  isBlocked                  Boolean   @default(false)
  wishlistProductIds         String[]  @db.ObjectId
  recentlyViewedProductIds   String[]  @db.ObjectId

  // Relations
  addresses      Address[]
  orders         Order[]
  cart           Cart?
  supportTickets SupportTicket[]
  paymentMethods PaymentMethod[]
  activityLog    AdminActivityLog[]
  chatSessions   ChatSession[]
  reviews        ProductReview[]
}

model Address {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  type         String // shipping or billing
  fullName     String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  phone        String?
  isDefault    Boolean @default(false)

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PaymentMethod {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  type        String // card
  last4       String
  expiryMonth String
  expiryYear  String
  brand       String
  isDefault   Boolean @default(false)

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}


// --- E-COMMERCE MODELS ---

model Product {
  id                  String           @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  slug                String          @unique
  price               Float // Selling Price
  mrp                 Float // MRP
  imageUrl            String
  images              String[]
  description         String
  longDescriptionHtml String?
  sku                 String?          @unique
  tags                String[]
  categoryName        String?
  subCategoryName     String?
  isNew               Boolean          @default(false)
  isBestSeller        Boolean          @default(false)
  rating              Float?
  stockQuantity       Int?
  publishStatus       String           @default("Draft") // Draft, Published, Hidden
  gender              String?
  isTaxable           Boolean?
  specifications      Json[]
  brand               String?
  vendor              String?
  metaTitle           String?
  metaDescription     String?
  bannerImageUrl      String?
  bannerLink          String?
  faqs                Json[]

  // Relations
  variants   ProductVariant[]
  orderItems OrderItem[]
  cartItems  CartItem[]
  reviews    ProductReview[]

  @@index([categoryName])
}

model ProductVariant {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  price         Float
  stockQuantity Int
  sku           String @unique
  imageUrl      String?
  attributes    Json // { "Color": "Red", "Size": "M" }

  // Relations
  productId  String     @db.ObjectId
  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@index([productId])
}

model Category {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String     @unique

  // Self-relation for subcategories
  parentId      String?    @db.ObjectId
  parent        Category?  @relation("SubCategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subCategories Category[] @relation("SubCategories")
}

model VariantAttribute {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  name   String   @unique // e.g., "Size", "Color"
  values String[]
}


model Order {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  orderDate         DateTime    @default(now())
  totalAmount       Float
  status            String // Pending, Processing, Shipped, Delivered, Cancelled, Refunded, Returned
  shippingAddress   Json
  trackingNumber    String?
  paymentType       String?
  deliveryType      String?
  deliveryCharge    Float?
  appliedCouponCode String?
  discountAmount    Float?
  transactionId     String?
  paymentStatus     String? // Success, Failed, Pending
  customerName      String

  // Relations
  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])
  items  OrderItem[]

  @@index([userId])
}

model OrderItem {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  quantity        Int
  priceAtPurchase Float
  variantSnapshot Json

  // Relations
  orderId   String         @db.ObjectId
  order     Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String         @db.ObjectId
  product   Product        @relation(fields: [productId], references: [id])
  variantId String         @db.ObjectId
  variant   ProductVariant @relation(fields: [variantId], references: [id])

  @@index([orderId])
}

model Cart {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  userId String     @unique @db.ObjectId
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  CartItem[]
}

model CartItem {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int

  // Relations
  cartId    String         @db.ObjectId
  cart      Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String         @db.ObjectId
  product   Product        @relation(fields: [productId], references: [id])
  variantId String         @db.ObjectId
  variant   ProductVariant @relation(fields: [variantId], references: [id])

  @@index([cartId])
}


// --- DYNAMIC CONTENT MODELS ---

model HeroSlide {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl    String
  title       String?
  caption     String?
  ctaText     String?
  ctaLink     String?
  order       Int
  isActive    Boolean @default(true)
  ratingText  String?
  modelImageUrl String?
}

model OccasionContent {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String @unique // e.g., "Wedding", "Festive"
  title       String
  description String
  imageUrl    String
}

model CuratedLook {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  imageUrl    String
  productIds  String[] @db.ObjectId
}

model EmotionCategory {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String @unique
  emotionTag  String @unique
  imageUrl    String
  description String
}

model ShoppableVideo {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  videoUrl           String
  thumbnailUrl       String
  title              String
  tag                String?
  featuredProductIds String[] @db.ObjectId
}

model Testimonial {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  userImage       String
  userName        String
  userHandle      String?
  quote           String
  productImageUrl String?
  rating          Int?
  approved        Boolean @default(false)
}

model FashionGalleryImage {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl String
  order    Int
  isActive Boolean @default(true)
}

model GuidedDiscoveryPath {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  prompt        String
  targetFilters Json
}

model ActivityLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  timestamp DateTime @default(now())
}

model FloatingInfo {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  corner           String // topLeft, topRight, bottomLeft, bottomRight
  text             String
  triggerSectionId String?
}

model MediaFile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  size      Float
  type      String // image, video
  createdAt DateTime @default(now())
}

model ProductReview {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  approved  Boolean  @default(false)

  // Relations
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}

model Faq {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  question String
  answer   String
  order    Int
  isActive Boolean @default(true)
}

// --- ADMIN & SETTINGS MODELS ---

model SupportTicket {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  subject     String
  status      String // Open, In Progress, Resolved, Closed
  lastUpdated DateTime @updatedAt
  createdAt   DateTime @default(now())
  messages    Json[] // [{ sender, text, timestamp }]

  // Relations
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedTo  String?  @db.ObjectId // Admin User ID

  @@index([userId])
}

model ChatSession {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime      @default(now())
  lastUpdated DateTime      @updatedAt

  // Relations
  userId   String        @db.ObjectId
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]

  @@index([userId])
}

model ChatMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sender    String // user or admin
  text      String
  timestamp DateTime @default(now())

  // Relations
  sessionId String      @db.ObjectId
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
}

model CmsPage {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  type             String // page, post
  title            String
  slug             String   @unique
  content          String // HTML content
  metaTitle        String
  metaDescription  String
  status           String // Published, Draft
  lastUpdated      DateTime @updatedAt
  lastUpdatedBy    String // Admin User Name
  featuredImageUrl String?
}

model AdminActivityLog {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  timestamp     DateTime @default(now())
  action        String
  details       String?
  ipAddress     String?

  // Relations
  adminUserId String @db.ObjectId
  adminUser   User   @relation(fields: [adminUserId], references: [id])

  @@index([adminUserId])
}

model Coupon {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  code        String    @unique
  type        String // percentage, fixed_amount, bogo
  value       Float
  description String?
  startDate   DateTime?
  endDate     DateTime?
  usageLimit  Int?
  usageCount  Int       @default(0)
  isActive    Boolean   @default(true)
  rules       String?
}

model CustomerGroup {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String @unique
  memberCount Int
  rules       String
}

model MarketingCampaign {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  type       String // email, push
  subject    String?
  content    String
  status     String // Draft, Sent, Active
  sentAt     DateTime?
  recipients Int?
}

model SiteSettings {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  singleton    String @unique @default("global_settings")
  storeSettings    Json
  seoSettings      Json
  themeSettings    Json
  headerLinks      Json[]
  footerSettings   Json
  integrations     Json
}

model ShippingZone {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  countries String[]
  states    String[]
  postcodes String[]

  // Relations
  rates ShippingRate[]
}

model ShippingRate {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  price          Float
  condition      String? // min_order_value, weight_based
  conditionValue Float?

  // Relations
  zoneId String       @db.ObjectId
  zone   ShippingZone @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@index([zoneId])
}

model ShippingProvider {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String  @unique // e.g., 'Shiprocket'
  apiKey    String?
  apiSecret String?
  enabled   Boolean
}

model PaymentGateway {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String  @unique
  enabled  Boolean
  settings Json // { apiKey, apiSecret }
}